#Before starting, make sure to unzip the fastq files. Also do an interactive session and load R/4.2.1. Can use gzip -d command on terminal to do this
library(dada2)
path <- "/gpfs/afm/cancergenetics/Seshadhri/Stephanie_Schuller_Data/Fastq"
#The list files command should list all the paired end reads for each sample.
list.files(path)

# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="_R1_001.fastq", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)

#Plot the Read Quality for the forward and reverse paired end reads and put them in separate PDFs
#This part of the code does not work properly in HPC. Have to figure out how to get these plots into a PDF and put that in. Possibly assign each of the plots to variables and then use ggplot? The other option is to do the entire pipelin$
pdf(file = "Read_Quality_Profiles.pdf", width = 4, height = 4)
plotQualityProfile(fnRs)
plotQualityProfile(fnRs)
dev.off()

# Place filtered files in filtered/ subdirectory
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names

out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, maxN=0, maxEE=c(10,10), minQ=1, truncQ=1, rm.phix=TRUE, compress=TRUE, multithread=FALSE)

print(out)

errF <- learnErrors(filtFs, multithread=FALSE)
errR <- learnErrors(filtRs, multithread=FALSE)

pdf(file = "Error_Plots.pdf", width = 4, height = 4)
plotErrors(errF, nominalQ=TRUE)
plotErrors(errR, nominalQ=TRUE)
dev.off()

dadaFs <- dada(filtFs, err=errF, multithread=FALSE)
dadaRs <- dada(filtRs, err=errR, multithread=FALSE)
dadaFs[[1]]

mergers <- mergePairs(dadaFs, filtFs, dadaRs, filtRs, verbose=TRUE)
# Inspect the merger data.frame from the first sample
head(mergers[[1]])

seqtab <- makeSequenceTable(mergers)
dim(seqtab)

table(nchar(getSequences(seqtab)))

seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=FALSE, verbose=TRUE)
dim(seqtab.nochim)

sum(seqtab.nochim)/sum(seqtab)

#Track Number of Reads through the pipeline
getN <- function(x) sum(getUniques(x))
track <- cbind(out, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))
# If processing a single sample, remove the sapply calls: e.g. replace sapply(dadaFs, getN) with getN(dadaFs)
colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")
rownames(track) <- sample.names
head(track)

db_path = "/gpfs/afm/cancergenetics/Seshadhri/Stephanie_Schuller_Data/GTDB_bac-arc_ssu_r86.fa.gz"

taxa <- assignTaxonomy(seqtab.nochim, db_path, multithread=FALSE)
taxa.print <- taxa # Removing sequence rownames for display only
rownames(taxa.print) <- NULL
print(taxa.print)
taxa.print.df <- as.data.frame(taxa.print)
track.df <- as.data.frame(track)
seqtab.nochim.df <- as.data.frame(seqtab.nochim)
write.csv(file = "Taxa_Print.csv", taxa.print.df)
write.csv(file = "Read_Tracker.csv", track.df)
write.csv(file = "Seqtab_Nochim.csv", seqtab.nochim.df)

colnames(seqtab.nochim.df) <- c(1:ncol(seqtab.nochim.df))
colnames(seqtab.nochim.df) <- paste("ASV", colnames(seqtab.nochim.df), sep = "_")
seqtab.nochim.relative.df <- decostand(seqtab.nochim.df, method='total', MARGIN = 1)
rownames(taxa.print.df) <- colnames(seqtab.nochim.df)
taxa.print.matrix <- as.matrix(taxa.print.df)
metadata.df <- read.csv("Metadata.csv", header = TRUE, row.names = 1)

#Preparing and Creating the Phyloseq Object
otu_tab <- otu_table(seqtab.nochim.df, taxa_are_rows = FALSE)
sample_dat <- sample_data(metadata.df)
tax_dat <- tax_table(taxa.print.matrix)
ps_schuller <- merge_phyloseq(otu_tab, sample_dat, tax_dat)
rank_names(ps_schuller)
#Genus Level Phyloseq Object
ps_genus <- tax_glom(ps_schuller, "Genus")
p1 <- plot_bar(ps_genus, fill = "Genus")
ggsave(filename = 'ps_genus.pdf', plot=p1, width=30, height=8)

#Family Level Phyloseq Object
ps_family <- tax_glom(ps_schuller, "Family")
p2 <- plot_bar(ps_family, fill = "Family")
ggsave(filename = "ps_family.pdf", plot = p2, width = 30, height = 8)

#Order Level Phyloseq Object
ps_order <- tax_glom(ps_schuller, "Order")
p3 <- plot_bar(ps_family, fill = "Order")
ggsave(filename = "ps_order.pdf", plot = p3, width = 30, height = 8)

#Class Level Phyloseq Object
ps_class <- tax_glom(ps_schuller, "Class")
p4 <- plot_bar(ps_class, fill = "Class")
ggsave(filename = "ps_class.pdf", plot = p4, width = 30, height = 8)

#Phylum Level Phyloseq Object
ps_phylum <- tax_glom(ps_schuller, "Phylum")
p5 <- plot_bar(ps_phylum, fill = "Phylum")
ggsave(filename = "ps_phylum.pdf", plot = p5, width = 30, height = 8)

#Kingdom Level Phyloseq Object
ps_kingdom <- tax_glom(ps_schuller, "Kingdom")
p6 <- plot_bar(ps_kingdom, fill = "Kingdom")
ggsave(filename = "ps_kingdom.pdf", plot = p6, width = 30, height = 8)

#Shannon Diversity Index
seqtab.nochim.relative.matrix <- as.matrix(seqtab.nochim.relative.df)
shannon_diversity <- diversity(seqtab.nochim.relative.matrix, index = "shannon")
shannon_diversity
shannon_diversity <- as.data.frame(shannon_diversity)
write.csv(file = "Shannon Diversity.csv", shannon_diversity)
shannon_plot <- ggplot(shannon_diversity, aes(x = shannon_diversity))+ geom_histogram(fill="#69b3a2", color="#e9ecef", alpha=0.9)
ggsave(filename = "Shannon_Diversity_plot.pdf", plot = shannon_plot, width = 10, height = 15)
rowname_to_remove <- c("Undetermined")
seqtab_filtered <- seqtab.nochim.relative.matrix[!(row.names(seqtab.nochim.relative.matrix) %in% rowname_to_remove),]
filtered_shannon_diversity <- diversity(seqtab_filtered, index = "shannon")
filtered_shannon_diversity
filtered_shannon_plot <- ggplot(shannon_diversity, aes(x = shannon_diversity))+ geom_histogram(fill="#69b3a2", color="#e9ecef", alpha=0.9)
ggsave(filename = "Shannon_Diversity_plot_filtered.pdf", plot = shannon_plot, width = 10, height = 15)


#To View the Plot Interactively, download the saved workspace image from R to the local machine
save.image(file = "Schuller_Workspace.RData")

#Load the RData file into the local machine (e.g. RStudio) and then type the following code to view interactive plots
#ps_schuller_updated <- tax_fix(ps_schuller) %>% phyloseq_validate()
#ord_explore(ps_schuller_updated)
